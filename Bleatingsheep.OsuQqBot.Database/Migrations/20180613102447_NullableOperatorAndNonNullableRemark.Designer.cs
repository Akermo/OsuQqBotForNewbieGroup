// <auto-generated />
using Bleatingsheep.OsuMixedApi;
using Bleatingsheep.OsuQqBot.Database.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Bleatingsheep.OsuQqBot.Database.Migrations
{
    [DbContext(typeof(NewbieContext))]
    [Migration("20180613102447_NullableOperatorAndNonNullableRemark")]
    partial class NullableOperatorAndNonNullableRemark
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("Bleatingsheep.OsuMixedApi.Beatmap", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("Mode");

                    b.Property<double>("AR");

                    b.Property<int>("Approved");

                    b.Property<DateTimeOffset?>("ApprovedDateOffset");

                    b.Property<string>("Artist")
                        .IsRequired();

                    b.Property<double>("Bpm");

                    b.Property<double>("CS");

                    b.Property<string>("Creator")
                        .IsRequired();

                    b.Property<string>("DifficultyName")
                        .IsRequired();

                    b.Property<int>("FavoriteCount");

                    b.Property<string>("FileMD5")
                        .IsRequired();

                    b.Property<int>("Genre");

                    b.Property<double>("HP");

                    b.Property<int>("HitLength");

                    b.Property<int>("Language");

                    b.Property<DateTimeOffset>("LastUpdateOffset");

                    b.Property<int?>("MaxCombo");

                    b.Property<double>("OD");

                    b.Property<int>("SetId");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<double>("Stars");

                    b.Property<string>("Tags")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("TotalLength");

                    b.HasKey("Id", "Mode");

                    b.ToTable("CachedBeatmaps");
                });

            modelBuilder.Entity("Bleatingsheep.OsuQqBot.Database.Models.BindingInfo", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<int>("OsuId")
                        .IsConcurrencyToken();

                    b.Property<string>("Source")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.ToTable("Bindings");
                });

            modelBuilder.Entity("Bleatingsheep.OsuQqBot.Database.Models.Chart", b =>
                {
                    b.Property<int>("ChartId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ChartCreator");

                    b.Property<string>("ChartDescription")
                        .IsRequired();

                    b.Property<string>("ChartName")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("EndTime");

                    b.Property<bool>("IsRunning");

                    b.Property<double?>("MaximumPerformance");

                    b.Property<bool>("Public");

                    b.Property<double>("RecommendPerformance");

                    b.Property<DateTimeOffset>("StartTime");

                    b.HasKey("ChartId");

                    b.ToTable("Charts");
                });

            modelBuilder.Entity("Bleatingsheep.OsuQqBot.Database.Models.ChartAdministrator", b =>
                {
                    b.Property<int>("ChartId");

                    b.Property<long>("Administrator");

                    b.HasKey("ChartId", "Administrator");

                    b.ToTable("ChartAdministrators");
                });

            modelBuilder.Entity("Bleatingsheep.OsuQqBot.Database.Models.ChartBeatmap", b =>
                {
                    b.Property<int>("ChartId");

                    b.Property<int>("BeatmapId");

                    b.Property<int>("Mode");

                    b.Property<bool>("AllowsFail");

                    b.Property<int>("BannedMods");

                    b.Property<int>("ForceMods");

                    b.Property<int>("RequiredMods");

                    b.Property<string>("ScoreCalculation");

                    b.HasKey("ChartId", "BeatmapId", "Mode");

                    b.ToTable("ChartBeatmaps");
                });

            modelBuilder.Entity("Bleatingsheep.OsuQqBot.Database.Models.ChartTry", b =>
                {
                    b.Property<int>("ChartId");

                    b.Property<int>("BeatmapId");

                    b.Property<int>("Mode");

                    b.Property<long>("Date");

                    b.Property<int>("UserId");

                    b.Property<double>("Accuracy");

                    b.Property<int>("Combo");

                    b.Property<int>("Mods");

                    b.Property<double>("PPWhenCommit");

                    b.Property<string>("Rank")
                        .IsRequired();

                    b.Property<long>("Score");

                    b.HasKey("ChartId", "BeatmapId", "Mode", "Date", "UserId");

                    b.ToTable("ChartTries");
                });

            modelBuilder.Entity("Bleatingsheep.OsuQqBot.Database.Models.ChartValidGroup", b =>
                {
                    b.Property<int>("ChartId");

                    b.Property<long>("GroupId");

                    b.HasKey("ChartId", "GroupId");

                    b.ToTable("ChartValidGroups");
                });

            modelBuilder.Entity("Bleatingsheep.OsuQqBot.Database.Models.OperationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("Operation");

                    b.Property<string>("Operator");

                    b.Property<long?>("OperatorId");

                    b.Property<string>("Remark")
                        .IsRequired();

                    b.Property<string>("User");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("Bleatingsheep.OsuQqBot.Database.Models.ChartAdministrator", b =>
                {
                    b.HasOne("Bleatingsheep.OsuQqBot.Database.Models.Chart")
                        .WithMany("Administrators")
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bleatingsheep.OsuQqBot.Database.Models.ChartBeatmap", b =>
                {
                    b.HasOne("Bleatingsheep.OsuQqBot.Database.Models.Chart", "Chart")
                        .WithMany("Maps")
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bleatingsheep.OsuQqBot.Database.Models.ChartTry", b =>
                {
                    b.HasOne("Bleatingsheep.OsuQqBot.Database.Models.Chart", "Chart")
                        .WithMany()
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bleatingsheep.OsuQqBot.Database.Models.ChartBeatmap", "Beatmap")
                        .WithMany("Commits")
                        .HasForeignKey("ChartId", "BeatmapId", "Mode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bleatingsheep.OsuQqBot.Database.Models.ChartValidGroup", b =>
                {
                    b.HasOne("Bleatingsheep.OsuQqBot.Database.Models.Chart")
                        .WithMany("Groups")
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
